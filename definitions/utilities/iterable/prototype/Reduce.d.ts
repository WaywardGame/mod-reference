/*!
 * Copyright Unlok, Vaughn Royko 2011-2019
 * http://www.unlok.ca
 *
 * Credits & Thanks:
 * http://www.unlok.ca/credits-thanks/
 *
 * Wayward is a copyrighted and licensed work. Modification and/or distribution of any source files is prohibited. If you wish to modify the game in any way, please refer to the modding guide:
 * https://waywardgame.github.io/
 */
declare global {
    interface IterableIterator<T> {
        /**
         * Returns a value of type X, generated by iterating through the iterable and calling the reducer function for each.
         * @param reducer A function that returns a new result, taking a new entry and the result from the previous iteration, or
         */
        reduce<X>(reducer: (newValue: T, oldValue?: X) => X): X;
        /**
         * Returns a value of type X, generated by iterating through the iterable and calling the reducer function for each.
         * @param reducer A function that returns a new result, taking a new entry and the result from the previous iteration, or
         * @param initialValue if it's the first iteration.
         */
        reduce<X>(reducer: (newValue: T, oldValue: X) => X, initialValue: X): X;
    }
}
export declare function reduce(this: IterableIterator<any>, reducer: (oldValue: any | undefined, entry: any) => any, defaultValue?: any): any;
