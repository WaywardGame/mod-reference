declare global  {
    type IterableOf<T> = T[] | IterableIterator<T>;
    type GeneratorOf<T> = () => IterableOf<T>;
    interface IterableIterator<T> {
        /**
         * Returns an iterable of type X, using the given map function
         * @param mapper A function that maps an entry of type T to its corresponding type X
         */
        map<X>(mapper: (val: T) => X): IterableIterator<X>;
        /**
         * Returns an iterable that will loop only over the entries that match the given filter
         * @param filter A function that returns true if the value should be included and false if it shouldn't
         */
        filter(filter: (val: T) => boolean): IterableIterator<T>;
        /**
         * Returns an iterable that will first loop over the entries in itself, then the entries in the given iterables
         * @param iterables The other iterables to loop over
         */
        include<X>(...iterables: Array<IterableOf<X>>): IterableIterator<T | X>;
        /**
         * Returns a value of type X, generated by iterating through the iterable and calling the reducer function for each.
         * @param reducer A function that takes the result from the previous iteration, or undefined if it's the first iteration, and returns a new result.
         */
        reduce<X>(reducer: (oldValue: X | undefined, entry: T) => X): X;
        /**
         * Returns a value of type X, generated with the given collector function.
         * @param collector A function that takes the iterable, and returns type X
         * @see `utilities/Collectors` for premade collectors
         */
        collect<X>(collector: (val: IterableIterator<T>) => X): X;
        /**
         * Returns the first value in this iterator, or undefined if there are no values.
         */
        first(): T | undefined;
        /**
         * Returns the first value in this iterator.
         * @param orElse Returns this if there are no values.
         */
        first(orElse: T): T;
    }
    interface Array<T> {
        /**
         * Returns an iterator for the values of this array.
         * This method will be removed when it becomes native in Chromium 66+
         */
        values(): IterableIterator<T>;
    }
    interface Map<K, V> {
        /**
         * Sets multiple entries in this map from an iterable of entries
         */
        setAll(entriesIterable: IterableOf<[K, V]>): void;
    }
    interface MapConstructor {
        /**
         * Creates a map from an iterable of entries
         */
        create<K, V>(entriesIterable: IterableOf<[K, V]>): Map<K, V>;
    }
}
/**
 * This is an empty function. The `IterableIterator` support is applied globally when this
 * module is imported--however, this module will be removed by Uglify because Uglify is
 * dumb, unless we provide something to use when importing this module. As a result, it's
 * only useful to import this module once. Currently, it is done in the module `Game`.
 */
export default function IterableIterator(): void;
