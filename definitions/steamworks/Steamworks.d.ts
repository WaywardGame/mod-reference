import { ModType } from "mod/IModManager";
import { IModPath, ISteamFriend, ISteamId, ISteamworks, IWorkshopItem, LobbyType } from "steamworks/ISteamworks";
export default class Steamworks implements ISteamworks {
    private installDir;
    private recordedProblems;
    private steamId;
    private betaName;
    private overlayWorks;
    private platform;
    private initializingMods;
    private logsPath;
    private logFilePath;
    private multiplayerLogFilePath;
    private modsPath;
    private workshopPath;
    private workshopModsPath;
    private workshopSyncPath;
    private workshopSharePath;
    private loadedMods;
    private publishedMods;
    private workshopUrl;
    private workshopFileUrl;
    private ignoredDirectories;
    private _serverIdToJoin;
    private _currentLobbyId;
    private _multiplayerLogs;
    private importingSaveGameMod;
    isElectron(): boolean;
    isOverlayWorking(): boolean;
    isGreenworksEnabled(): boolean;
    getAbsolutePath(p: string): any;
    isLinux(): boolean;
    isMac(): boolean;
    initialize(): void;
    onUnload(): void;
    setOverlayWorks(overlayWorks: boolean): void;
    setupMods(callback: () => void): void;
    getSteamId(): ISteamId | undefined;
    getFriends(): ISteamFriend[] | undefined;
    getScreenName(): string | undefined;
    getBetaName(): string;
    getPublishedMods(): IWorkshopItem[] | undefined;
    setRichPresence(key: string, value: string): boolean;
    clearRichPresence(): void;
    createLobby(type: LobbyType): void;
    leaveLobby(): void;
    joinLobby(lobbyId: string): void;
    getLobbyMembers(): ISteamFriend[] | undefined;
    getPublishedMod(publishFileId: string): IWorkshopItem | undefined;
    fillOutWorkshopMod(index: number, item?: IWorkshopItem): void;
    publishMod(modIndex: number, callback: (err?: string, publishedFileId?: string) => void): void;
    createArchive(id: string, source: string, callback: (err?: string) => void): void;
    getPublishedItems(callback: (err: string | undefined, items?: IWorkshopItem[]) => void): void;
    openUrl(url: string): void;
    openWorkshop(publishId?: string): void;
    openModsFolder(): void;
    openLogsFolder(): void;
    unsubscribe(publishId: string, callback: (err?: string) => void): void;
    sendMessage(name: string, data: string): void;
    toggleDeveloperTools(): void;
    getModPath(name: string, modType: ModType, file?: string, checkIfExists?: boolean): IModPath | undefined;
    createSaveGameMod(name: string, slot: number, callback: (success: boolean) => void): void;
    importFromSaveGameMod(modIndex: number, json: string, callback: (success: boolean) => void): void;
    deleteSaveGameMod(name: string): void;
    debugLog(...args: any[]): void;
    addZoomFactor(change: number): void;
    setDefaultZoomFactor(): void;
    updateZoomFactor(): void;
    onUpdateZoomFactor(): void;
    hasServerToJoin(): boolean;
    onReady(): void;
    setupReporting(): void;
    recordProblem(message: string): void;
    setupMultiplayerLog(): void;
    getMultiplayerLogs(): string;
    multiplayerLog(...args: any[]): void;
    multiplayerLogError(...args: any[]): void;
    private setupAndInitializeWorkshopMods(callback, retried?);
    private initializeModsFromFolder(folderName, modType, callback);
    private enumerateInstalledWorkshopMods(callback);
    private refreshSetupMods();
    private refreshPublishedMods(callback);
    private getIdFromWorkshopItem(item);
    private syncWorkshopItems(callback);
    private copyFolder(source, destination, callback);
    private saveFilesToCloud(id, callback);
    private getFileShareId(id, callback);
    private publishFileToWorkshop(id, title, description, publishedFileId, callback);
    private extractArchive(id, destination, callback);
    private safeOpenFolder(folder);
    private onGameOverlayActive(isActive, callback?);
    private onGameJoinRequested(connectionString);
    private onLobbyCreated(success, lobbyId);
    private onLobbyEntered(success, lobbyId);
    private onLobbyChatUpdate(lobbyId, steamIdUserChanged, state);
    private onLobbyJoinRequested(lobbyId);
    private createFolderIfNotExists(folder);
    private getSyncPath(name);
    private getSharePathForModZip(name);
    private getSharePathForModImage(name);
    private recordEvent(categorySuffix, action);
    private parseConnectArgument(args);
}
