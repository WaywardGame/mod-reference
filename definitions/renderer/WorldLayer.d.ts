import { TerrainMask, TerrainType } from "Enums";
import { IByteGrid } from "renderer/fieldofview/IByteGrid";
import IExploreMap from "renderer/IExploreMap";
import { TerrainData } from "renderer/IWorld";
import { IWorldLayer, onDoodadUpdateDelegate, onTileUpdateDelegate } from "renderer/IWorldLayer";
import { ITile } from "tile/ITerrain";
export default class WorldLayer implements IWorldLayer {
    width: number;
    height: number;
    level: number;
    lightLevelMap: IByteGrid;
    lightBlockMap: IByteGrid;
    exploredMap: IExploreMap;
    onTileUpdate: onTileUpdateDelegate;
    onDoodadUpdate: onDoodadUpdateDelegate;
    private terrainMap;
    private instance;
    constructor(width: number, height: number, level: number);
    delete(): void;
    resetExploredMap(): void;
    getTileType(x: number, y: number): TerrainType;
    getTile(x: number, y: number): TerrainData;
    getType(terrain: TerrainData): TerrainType;
    isWall(terrain: TerrainData): boolean;
    isFence(terrain: TerrainData): boolean;
    isTilled(terrain: TerrainData): boolean;
    setTile(x: number, y: number, terrainType: TerrainType, terrainMasks?: TerrainMask): void;
    updateAll(): void;
    updateTile(x: number, y: number, tile: ITile, shouldUpdate?: boolean): void;
    private mapIndex(x, y);
    private setTileInternal(x, y, tile);
}
