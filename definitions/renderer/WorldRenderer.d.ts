import Vec2 = TSM.vec2;
import IWorldRenderer from "renderer/IWorldRenderer";
import * as TileAdaptor from "renderer/TileAdaptors";
import WorldLayerRenderer from "renderer/WorldLayerRenderer";
export default class WorldRenderer implements IWorldRenderer {
    private gl;
    private static textureShaderProgram;
    private static worldShaderProgram;
    private static fogShaderProgram;
    positionTextureBuffer: WebGLBuffer;
    positionBuffer: WebGLBuffer;
    ditherTexture: WebGLTexture;
    layers: WorldLayerRenderer[];
    dirtAdaptor: TileAdaptor.Dirt;
    tillAdaptor: TileAdaptor.Till;
    waterAdaptor: TileAdaptor.Water;
    lavaAdaptor: TileAdaptor.Lava;
    fenceAdaptor: TileAdaptor.Fence;
    mountainAdaptor: TileAdaptor.Mountain;
    wallAdaptor: TileAdaptor.Wall;
    defaultAdaptor: TileAdaptor.Default;
    floorAdaptor: TileAdaptor.Floor;
    private ambientIntensity;
    private ambientColorDay;
    private ambientColorDawn;
    private ambientColorNight;
    private ambientColorCave;
    private screenspaceViewport;
    private worldspaceViewport;
    private tileScale;
    private zoom;
    private compositeFramebuffer;
    private compositeTexture;
    private layerFramebuffer;
    private layerTexture;
    private depthBuffer;
    private fogFramebuffer;
    private fogTexture;
    private fogTextureStorage;
    private vertexArraySingle;
    private vertexArrayDouble;
    private itemBatch;
    private corpseBatch;
    private creatureBatch;
    private creaturesInViewport;
    private viewportSpritesDirty;
    static compileShaders(gl: WebGL2RenderingContext): void;
    constructor(gl: WebGL2RenderingContext);
    updateAll(): void;
    setSpriteTexture(texture: WebGLTexture, textureSizeInversed: Vec2): any;
    getPixelSize(): number;
    getZoom(): number;
    getTileScale(): number;
    setTileScale(tileScale: number): void;
    setZoom(zoom: number): void;
    setViewport(view: Vec2): void;
    getViewport(): Vec2;
    getTileViewport(): Vec2;
    getAmbientColor(): number[];
    renderWorld(x: number, y: number, z: number): void;
    render(): void;
    screenToTile(screenX: number, screenY: number): Vec2;
    getViewportBounds(): {
        min: Vec2;
        max: Vec2;
        z: number;
    };
    computeSpritesInViewport(): void;
    batchCreatures(): void;
    private isFlyingOffset(tile);
    private batchShadow(fromX, fromY, toX, toY, t, anim);
    private batchPlayers(batchLayer);
    private batchPlayer(player, batchLayer);
    private spriteBatchForLayer(layer);
    private shouldOffsetFlying(tile);
    private computeSpritesInViewportInternal();
}
