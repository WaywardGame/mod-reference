import { AiType, ICreature, ICreatureDescription, IDamageInfo } from "creature/ICreature";
import { CreatureType, FacingDirection, IMessagePack, ItemType, MoveType, SfxType } from "Enums";
import { IItem } from "item/IItem";
import { IPlayer } from "player/IPlayer";
import { IUnserializedCallback } from "save/ISerializer";
import { ITile } from "tile/ITerrain";
export default class Creature implements ICreature, IUnserializedCallback {
    aberrant?: boolean;
    ai: AiType;
    anim: number;
    chickenEggCounter?: number;
    direction: FacingDirection;
    enemy?: number;
    enemyAttempts?: number;
    enemyIsPlayer?: boolean;
    fromX: number;
    fromY: number;
    goatMilkCounter?: number;
    happiness?: number;
    hp: number;
    id: number;
    loot?: ItemType[];
    maxhp: number;
    moveType: MoveType | undefined;
    renamed?: string;
    respawned?: boolean;
    shouldSkipNextUpdate: boolean;
    stopNextMovement?: boolean;
    type: CreatureType;
    x: number;
    y: number;
    z: number;
    private _description;
    private _inFov;
    private _movementFinishTime;
    private _owner;
    constructor(creatureType?: CreatureType, x?: number, y?: number, z?: number, aberrant?: boolean);
    description(): ICreatureDescription | undefined;
    getTile(): ITile;
    isHidden(): boolean;
    isDefender(): boolean;
    getInspectHealthMessage(player: IPlayer): IMessagePack;
    getInspectResistVulnerabilityMessage(player: IPlayer): IMessagePack | undefined;
    checkForBurn(moveType?: MoveType): boolean;
    isTamed(): boolean;
    tame(player: IPlayer): boolean;
    release(): boolean;
    pet(): boolean;
    skipNextUpdate(): void;
    isInFov(): boolean;
    setInFov(inFov: boolean): void;
    getMoveType(): MoveType;
    setMoveType(moveType: MoveType): void;
    getMovementProgress(): number;
    getMovementFinishTime(): number | undefined;
    queueSoundEffect(type: SfxType, delay?: number, speed?: number): void;
    update(): boolean;
    moveTo(x: number, y: number, z: number): boolean;
    canSwapWith(player: IPlayer): boolean;
    getOwner(): IPlayer | undefined;
    damage(damageInfo: IDamageInfo): number | undefined;
    onUnserialized(): void;
    offer(items: IItem[]): IItem | undefined;
    private findPath(result);
    private checkCreatureMove(tileX, tileY, tileZ, moveType, isFinalMove?, ignorePlayer?);
    private findPlayersWithinRadius(x, y, z, radius);
    private processAttack(description, moveType, enemy);
    private processMovement(description, moveType, enemy, nearestPlayer);
    private processRandomAiChanges();
    private processSpecialAbilities(enemy);
}
