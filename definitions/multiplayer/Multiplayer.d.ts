import { IPlayerOptions } from "game/IGame";
import { IMultiplayer, IMultiplayerOptions, MultiplayerSyncCheck } from "multiplayer/IMultiplayer";
import { Packet, PacketType } from "multiplayer/IPacket";
import IPlayer from "player/IPlayer";
export default class Multiplayer implements IMultiplayer {
    private _playerIdentifier;
    private _matchmakingIdentifier;
    private _server;
    private _serverChannel;
    private _clients;
    private _joinServerTimeoutId;
    private _matchmakingServer;
    private _matchmakingRetryTimeoutId;
    private _isServer;
    private _channel;
    private _options;
    private _playerOptions;
    private _incomingPacketQueue;
    private _incomingPacketProcessorIntervalId;
    private _currentPacketProcessing;
    private _currentSyncPacketsProcessing;
    private _syncCheckStack;
    private _activeSyncCheck;
    constructor();
    isConnected(): boolean;
    isReady(): boolean;
    isServer(): boolean;
    isClient(): boolean;
    isProcessingPacket(): boolean;
    getOptions(): IMultiplayerOptions;
    createServer(channel: string | undefined, options?: IMultiplayerOptions): void;
    joinServer(channel: string, playerOptions?: IPlayerOptions): void;
    kick(player: IPlayer): void;
    onPlaying(): void;
    onLobbyEntered(success: boolean, lobbyId: string): void;
    sendPacket(player: IPlayer, packet: Packet): void;
    syncPacket(packet: Packet, clientSide?: () => any, checkPacketType?: boolean): any;
    executeSyncedPacket(packetObjectOrType: Packet | PacketType): number | undefined | void;
    disconnect(message?: string, callback?: () => void): void;
    updatePlayerId(oldPid: number, newPid: number): void;
    addSyncCheck(syncCheck: MultiplayerSyncCheck, value: any): void;
    private addDefaultSyncChecks();
    private getPacketSyncChecks();
    private disconnectAndResetGameState(uiMessage);
    private connectMatchmakingServer(channel);
    private disconnectMatchmakingServer();
    private onMatchmakingServerConnected();
    private clearMatchmakingRetryTimeout();
    private clearJoinServerRetryTimeout();
    private onMatchmakingServerError(event);
    private onMatchmakingServerMessage(event);
    private displayJoinServerRetryDialog();
    private setupConnection(peerConnection);
    private onIceConnectionStateChange(connection, event);
    private onDescriptionCreated(connection, description);
    private onDataChannelReceived(connection, event);
    private onDataChannelChanged(connection, event);
    private onDataChannelMessage(connection, event);
    private executeSyncedPacketInternal(packetObjectOrType, excludeConnection?);
    private packetProcessor();
    private processPacket(connection, packet);
    private synchronizationCheck(packet, checkBefore);
    private getPacketData(packet);
    private sendPacketInternal(packet, includeConnection?, excludeConnection?, force?);
    private _sendData(connection, data, sendNow?);
    private sendMatchmakingMessage(data, channel?);
    private closeConnection(connection);
    private onStateChange();
    private encodePacket(packet);
    private decodePacket(buffer);
}
