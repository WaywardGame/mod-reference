import { ICreature } from "creature/ICreature";
import { IDoodad } from "doodad/IDoodad";
import { IPoint } from "Enums";
import { IContainer, IItem } from "item/IItem";
import { IConnection } from "multiplayer/IMultiplayer";
import { PacketType } from "multiplayer/packets/IPacket";
export default abstract class BasePacket {
    protected static id: number;
    "constructor": typeof BasePacket;
    protected connection: IConnection;
    protected byteArray: Uint8Array;
    protected dataView: DataView;
    protected byteOffset: number;
    protected bufferSize: number;
    static getId(): number;
    static setId(id: number): void;
    constructor(connection?: IConnection);
    getId(): number;
    abstract getType(): PacketType;
    protected readInt8(): number;
    protected writeInt8(value: number): void;
    protected readUint8(): number;
    protected writeUint8(value: number): void;
    protected readUint16(): number;
    protected writeUint16(value: number): void;
    protected readUint32(): number;
    protected writeUint32(value: number): void;
    protected readFloat64(): number;
    protected writeFloat64(value: number): void;
    protected readBool(): boolean;
    protected writeBool(value: boolean): void;
    protected readUint8Array(): Uint8Array;
    protected writeUint8Array(value: Uint8Array): void;
    protected readUint32NumberArray(): number[];
    protected writeUint32NumberArray(value: number[]): void;
    protected readString(): string;
    protected writeString(value: string): void;
    protected readStringArray(): string[];
    protected writeStringArray(value: string[]): void;
    protected readPoint(): IPoint;
    protected writePoint(value: IPoint): void;
    protected readContainer(): IContainer;
    protected writeContainer(value: IContainer): void;
    protected readCreature(): ICreature | undefined;
    protected writeCreature(value: ICreature): void;
    protected readDoodad(): IDoodad | undefined;
    protected writeDoodad(value: IDoodad): void;
    protected readItem(): IItem;
    protected writeItem(value: IItem): void;
    protected readItemOrDoodad(): IItem | IDoodad | undefined;
    protected writeItemOrDoodad(value: IItem | IDoodad): void;
    protected readItems(): IItem[];
    protected writeItems(value: IItem[]): void;
    protected readObject(): any;
    protected writeObject(value: any): void;
    private ensureSize(byteIncrease);
}
