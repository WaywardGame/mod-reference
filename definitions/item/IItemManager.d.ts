import { IDoodad } from "doodad/IDoodad";
import { IItemTypeGroup, ItemQuality, ItemType, ItemTypeGroup } from "Enums";
import { IContainable, IContainer, IContainerReference, IItem, IItemArray, IRecipe } from "IItem";
import { Message } from "language/Messages";
import { IPlayer } from "player/IPlayer";
import { ITileContainer } from "tile/ITerrain";
import { ITile } from "tile/ITerrain";
export interface IItemManager {
    addToContainerInternal(item: IItem, container: IContainer, movingMultiple: boolean): void;
    breakContainerOnTile(itemContainer: IItem, x: number, y: number, z: number): void;
    checkMilestones(player: IPlayer, item: IItem): void;
    computeContainerWeight(container: IContainer): number;
    countItemsInContainer(container: IContainer, itemTypeSearch: ItemType, ignoreItem?: IItem): number;
    countItemsInContainerByGroup(container: IContainer, itemTypeGroupSearch: ItemTypeGroup | IItemTypeGroup, ignoreItem?: IItem): number;
    craft(player: IPlayer, itemType: ItemType, itemsToRequire: IItemArray, itemsToConsume: IItemArray, itemsToBeSalvaged: IItemArray, baseItem?: IItem): boolean;
    create(itemType: ItemType, container: IContainer, quality?: ItemQuality, fake?: boolean): IItem;
    createFake(itemType: ItemType, quality?: ItemQuality): IItem;
    decayItems(): boolean;
    derefenceContainerReference(containerRef: IContainerReference): Object | null;
    getComponentWeight(recipe: IRecipe): number;
    getContainerReference(container: IContainer | null): IContainerReference;
    getDefaultDurability(): number;
    getDefaultItemFromItemGroup(itemGroup: ItemTypeGroup): ItemType;
    getDisassemblyComponents(recipe: IRecipe, quality: ItemQuality): IItemArray;
    getItemInContainer(container: IContainer, itemTypeSearch: ItemType, ignoreItem?: IItem): IItem | null;
    getItemInContainerByGroup(container: IContainer, itemTypeGroupSearch: ItemTypeGroup, ignoreItem?: number): IItem | null;
    getItemInInventoryByGroup(player: IPlayer, itemTypeGroupSearch: ItemTypeGroup, ignoreItem?: number): IItem | null;
    getItemsInContainer(container: IContainer, includeSubContainers?: boolean): IItemArray;
    getItemsInContainerByGroup(container: IContainer, itemGroup: ItemTypeGroup, includeSubContainers?: boolean): IItemArray;
    getItemsInContainerByType(container: IContainer, itemType: ItemType, includeSubContainers?: boolean): IItemArray;
    getItemsString(items: IItemArray): string;
    getItemTypeGroupName(itemType: ItemType | ItemTypeGroup | IItemTypeGroup, prefix?: boolean): string;
    getPlayerFromInventoryContainer(container: IContainer): IPlayer | undefined;
    getPlayerWithItemInInventory(containable: IContainable): IPlayer | undefined;
    getRandomQuality(itemType: ItemType, bonusQuality?: number): ItemQuality;
    getTileContainer(x: number, y: number, z: number): IContainer;
    getWeight(itemType: ItemType): number;
    hasAdditionalRequirements(player: IPlayer, craftType: ItemType, message?: Message, faceDoodad?: boolean): boolean;
    hasRoomInContainer(extraWeight: number, container: IContainer): boolean;
    isContainableInContainer(containable: IContainable, container: IContainer): boolean;
    isContainer(obj: IItem | IDoodad | IContainer | ITile): obj is IContainer;
    isInGroup(itemType: ItemType, itemGroup: ItemTypeGroup): boolean;
    isInInventory(containable: IContainable): boolean;
    isItemInContainer(container: IContainer, itemTypeSearch: ItemType, ignoreItem?: IItem): boolean;
    isItemInContainerByGroup(container: IContainer, itemTypeGroupSearch: ItemTypeGroup, ignore?: number): boolean;
    isItemTypeGroup(itemType: (ItemType | ItemTypeGroup)): boolean;
    isItemTypeInGroup(itemType: ItemType, itemGroupSearch: ItemTypeGroup): boolean;
    isTileContainer(container: IContainer | null): boolean;
    loadReferences(): void;
    loadTileReferences(): void;
    moveAllFromContainerToContainer(player: IPlayer | undefined, fromContainer: IContainer, toContainer: IContainer, itemType?: ItemType, ofQuality?: ItemQuality, checkWeight?: boolean, onMoveItem?: (item: IItem) => void): void;
    moveAllFromContainerToInventory(player: IPlayer, container: IContainer, ofQuality?: ItemQuality): void;
    moveToContainer(player: IPlayer | undefined, item: IItem, container: IContainer): void;
    placeItemsAroundLocation(container: IContainer, x: number, y: number, z: number): void;
    reduceDismantleWeight(createdItems: IItemArray, itemWeight: number, mod?: number): void;
    remove(item: IItem): void;
    removeContainerItems(container: IContainer): void;
    resetMapsInContainer(container: IContainer): void;
    saveTileReferences(tileContainers: ITileContainer[]): void;
    spawn(itemTypes: ItemType[] | null, x: number, y: number, z: number): void;
}
export default IItemManager;
