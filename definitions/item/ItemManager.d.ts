import { IDoodad } from "doodad/IDoodad";
import { IItemTypeGroup, ItemQuality, ItemType, ItemTypeGroup, WeightType } from "Enums";
import { IContainable, IContainer, IContainerReference, IItem, IItemArray, IRecipe } from "item/IItem";
import IItemManager from "item/IItemManager";
import { Message } from "language/Messages";
import { IPlayer } from "player/IPlayer";
import { ITileContainer } from "tile/ITerrain";
import { ITile } from "tile/ITerrain";
export default class ItemManager implements IItemManager {
    private worldContainer;
    private cachedWeights;
    private cachedDecaysIntoWeights;
    private cachedDefaultItemForGroup;
    constructor();
    getContainerReference(container: IContainer | undefined): IContainerReference;
    derefenceContainerReference(containerRef: IContainerReference): object | undefined;
    addToContainerInternal(item: IItem, container: IContainer, movingMultiple?: boolean): void;
    removeContainerItems(container: IContainer): void;
    remove(item: IItem): void;
    getDisassemblyComponents(recipe: IRecipe, quality: ItemQuality | undefined): IItemArray;
    getWeight(itemType: ItemType, weightType?: WeightType): number;
    weightTree(itemType: ItemType, weightType?: WeightType, debug?: boolean, depth?: number): number;
    create(itemType: ItemType, container: IContainer, quality?: ItemQuality): IItem;
    createFake(itemType: ItemType, quality?: ItemQuality): IItem;
    isContainer(obj: IItem | IDoodad | IContainer | ITile | IPlayer): obj is IContainer;
    moveAllFromContainerToInventory(player: IPlayer, container: IContainer, ofQuality?: ItemQuality): void;
    computeContainerWeight(container: IContainer): number;
    moveAllFromContainerToContainer(player: IPlayer | undefined, fromContainer: IContainer, toContainer: IContainer, itemType?: ItemType | undefined, ofQuality?: ItemQuality | undefined, checkWeight?: boolean, onMoveItem?: (item: IItem) => void): void;
    moveToContainer(player: IPlayer | undefined, item: IItem, container: IContainer): void;
    hasRoomInContainer(extraWeight: number, container: IContainer, itemToMove?: IItem): boolean;
    breakContainerOnTile(itemContainer: IItem, x: number, y: number, z: number): void;
    placeItemsAroundLocation(container: IContainer, x: number, y: number, z: number): void;
    spawn(itemTypes: ItemType[] | undefined, x: number, y: number, z: number): void;
    resetMapsInContainer(container: IContainer): void;
    getTileContainer(x: number, y: number, z: number): IContainer;
    getRandomQuality(itemType: ItemType, bonusQuality?: number): ItemQuality;
    hasAdditionalRequirements(player: IPlayer, craftType: ItemType, message?: Message, faceDoodad?: boolean): boolean;
    isItemTypeGroup(itemType: (ItemType | ItemTypeGroup)): boolean;
    isItemTypeInGroup(itemType: ItemType, itemGroupSearch: ItemTypeGroup): boolean;
    getItemTypeGroupName(itemType: ItemType | ItemTypeGroup | IItemTypeGroup, prefix?: boolean): string;
    isInGroup(itemType: ItemType, itemGroup: ItemTypeGroup): boolean;
    craft(player: IPlayer, itemType: ItemType, itemsToRequire: IItemArray, itemsToConsume: IItemArray, itemsToBeSalvaged: IItemArray, baseItem?: IItem): boolean;
    decayItems(): boolean;
    getPlayerWithItemInInventory(containable: IContainable): IPlayer | undefined;
    countItemsInContainer(container: IContainer, itemTypeSearch: ItemType, ignoreItem?: IItem): number;
    countItemsInContainerByGroup(container: IContainer, itemTypeGroupSearch: ItemTypeGroup | IItemTypeGroup, ignoreItem?: IItem): number;
    getItemInContainer(container: IContainer, itemTypeSearch: ItemType, ignoreItem?: IItem): IItem | undefined;
    getItemInContainerByGroup(container: IContainer, itemTypeGroupSearch: ItemTypeGroup, ignoreItem?: number): IItem | undefined;
    getItemsInContainer(container: IContainer, includeSubContainers?: boolean): IItemArray;
    getItemsInContainerByType(container: IContainer, itemType: ItemType, includeSubContainers?: boolean): IItemArray;
    getItemsInContainerByGroup(container: IContainer, itemGroup: ItemTypeGroup, includeSubContainers?: boolean): IItemArray;
    getItemInInventoryByGroup(player: IPlayer, itemTypeGroupSearch: ItemTypeGroup, ignoreItem?: number): IItem | undefined;
    isItemInContainer(container: IContainer, itemTypeSearch: ItemType, ignoreItem?: IItem): boolean;
    isItemInContainerByGroup(container: IContainer, itemTypeGroupSearch: ItemTypeGroup, ignore?: number): boolean;
    isContainableInContainer(containable: IContainable, container: IContainer): boolean;
    isInInventory(containable: IContainable): boolean;
    isTileContainer(container: IContainer | undefined): boolean;
    getOrderedContainerItems(container: IContainer): IItem[];
    reduceDismantleWeight(createdItems: IItemArray, itemWeight: number, mod?: number): void;
    getItemsString(items: IItemArray): string;
    loadReferences(): void;
    saveTileReferences(tileContainers: ITileContainer[]): void;
    loadTileReferences(): void;
    getDefaultItemFromItemGroup(itemGroup: ItemTypeGroup, weightType?: WeightType): ItemType;
    checkMilestones(player: IPlayer, item: IItem): void;
    getDefaultDurability(): number;
    generateLookups(): void;
    updateItemOrder(container: IContainer, itemOrder: number[] | undefined): void;
    private updateItemOrderInternal(container, itemOrder);
    private loadReference(container);
    private removeFromContainerInternal(item);
    private updateUiOnItemRemove(player, item, willBeAnywhereInInventory?);
    private getCraftQualityBonus(quality, required?);
    private computeCraftQualityBonus(itemsToRequire, itemsToConsume);
    private isCraftSuccessful(player, recipe, qualityBonus);
    private getPlayerFromInventoryContainer(container);
    private getAbsentPlayerFromInventoryContainer(container);
}
